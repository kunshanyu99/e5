server.port= 8081

# 线上环境设置为false，这里用到模拟用户
isdebug=false
# 管理员的github_id
user.admin.githubId=a884d640-b480-4aa5-9c6a-aac1b6694b78
# token有效期
user.token.expire=3600
#server.servlet.session.tracking-modes=

## 设定ftl文件路径
#spring.freemarker.template-loader-path=classpath:/templates
#spring.freemarker.suffix=.ftl
## 关闭缓存，及时刷新，上线生产环境需要修改为true
#spring.freemarker.cache=false
#spring.freemarker.charset=UTF-8
#spring.freemarker.check-template-location=true
#spring.freemarker.content-type=text/html
#spring.freemarker.expose-request-attributes=true
#spring.freemarker.expose-session-attributes=true
#spring.freemarker.request-context-attribute=request
#logging.config=classpath:log4j2.xml
#通用数据源配置
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/e5?charset=utf8mb4&useSSL=false&serverTimezone=GMT
spring.datasource.username=root
spring.datasource.password=123456

# 放行静态资源
web.static.filtrate=/js/**,/css/**,/images/**,/fonts/**,/lib/**,/authority_error,/favicon.ico,/**.ico,/error,/admin/getDebugAdminToken
web.security.admin=/admin/**,/**,/auth2/**,/outlookLog/**
web.security.user=/user/**,/outlook/**,/auth2/**,/outlookLog/**
web.security.role_anonymous = /auth2/**,/getAnnouncement

# Redis
#Redis服务器地址
spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=6s48Q~VomrpF3dubw9aTbs_ix2pRMbhSACYDccPJ
#Redis数据库索引（默认为0）
spring.redis.database=9046fbba-3f54-406a-b3ed-1ac410dea1ac
#连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=50
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=3000
#连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=20
#连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=5
#连接超时时间（毫秒）
spring.redis.timeout=4000


# RabbitMq
#e5
#bifC1RT0kLQAxvv3pMRO

#Rabbit 消息队列配置
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=e5
spring.rabbitmq.password=e5
spring.rabbitmq.virtual-host=e5
spring.rabbitmq.connection-timeout=15000
#消费者最小数量
spring.rabbitmq.listener.simple.concurrency=1
#消费者最大数量
spring.rabbitmq.listener.simple.max-concurrency=10
#消费者每次从队列获取的消息数量。写多了，如果长时间得不到消费，数据就一直得不到处理
spring.rabbitmq.listener.simple.prefetch=20
#设置消费端手动 ack
spring.rabbitmq.listener.simple.acknowledge-mode=manual
# 限流
#spring.rabbitmq.listener.simple.prefetch=1

#开启 confirm 确认机制
#spring.rabbitmq.publisher-confirms=true
#开启 return 确认机制
spring.rabbitmq.publisher-returns=true
#设置为 true 后 消费者在消息没有被路由到合适队列情况下会被return监听，而不会自动删除
spring.rabbitmq.template.mandatory=true

# 每页显示条数
page.size = 10
# 定时器
qz_cron = 0/20 * * * * ?

#Redis用户Token头前缀设置
#redis.userhead=user.token:
redis.auth2.github=github.state:
redis.auth2.outlook=outlook.state:
redis.user.token=token:

github.client_id=
github.client_secret=

outlook.authorize.url = https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=%s&redirect_uri=%s&response_type=code&scope=openid offline_access Mail.Read&state=%s
outlook.errorMsg = CompactToken validation, Access token has expired, Access token validation failure

outlook.replyUrl=https://e5.qyi.io/outlook/auth2/receive
outlook.replyUrlDebug=http://localhost:4200/outlook/auth2/receive

# 连续错误次数
outlook.error.countMax=3
# 公告txt
announcement=classpath:announcement.txt
# debug模式密码
user.admin.debug.passwd=123456
